// TGOR (C) // CHECKED //
#pragma once

#include "CoreMinimal.h"

#include "DimensionSystem/Components/TGOR_DimensionComponent.h"
#include "TGOR_InventoryComponent.generated.h"

////////////////////////////////////////////// DECL //////////////////////////////////////////////////////


///////////////////////////////////////////// STRUCTS ///////////////////////////////////////////////////


/**
 * TGOR_InventoryComponent allows storing items
 */
UCLASS(ClassGroup = (Custom), Blueprintable, meta = (BlueprintSpawnableComponent))
class INVENTORYSYSTEM_API UTGOR_InventoryComponent : public UTGOR_DimensionComponent
{
	GENERATED_BODY()

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////// ENGINE ////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////

	UTGOR_InventoryComponent();


	//////////////////////////////////////////// IMPLEMENTABLES ////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////////////////////////
public:

	/** Endpoint for freeing unused items */
	UFUNCTION(BlueprintCallable, Category = "!TGOR Inventory", Meta = (Keywords = "C++"))
		void FreeItem(UTGOR_ItemTask* Task);

	/** Inserts an item, if another was displaced by this insertion the displaced item is returned */
	UFUNCTION(BlueprintCallable, Category = "!TGOR Inventory", Meta = (Keywords = "C++"))
		virtual UTGOR_ItemTask* PushItem(UTGOR_ItemTask* Task);

	/** Pulls an item from this inventory, returns nothing if empty or refused */
	UFUNCTION(BlueprintCallable, Category = "!TGOR Inventory", Meta = (Keywords = "C++"))
		virtual UTGOR_ItemTask* PullItem();

	////////////////////////////////////////////////////////////////////////////////////////////////////
protected:
	
	/////////////////////////////////////////////// INTERNAL ///////////////////////////////////////////

protected:

private:

};
